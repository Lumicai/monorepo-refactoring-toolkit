apiVersion: apps/v1
kind: Deployment
metadata:
  name: wundr-${ENVIRONMENT}
  namespace: wundr-${ENVIRONMENT}
  labels:
    app: wundr
    environment: ${ENVIRONMENT}
    version: ${VERSION}
spec:
  replicas: ${REPLICAS:-3}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: wundr
      environment: ${ENVIRONMENT}
  template:
    metadata:
      labels:
        app: wundr
        environment: ${ENVIRONMENT}
        version: ${VERSION}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: wundr
        image: ${IMAGE}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: ${ENVIRONMENT}
        - name: PORT
          value: "3000"
        - name: ENVIRONMENT
          value: ${ENVIRONMENT}
        - name: VERSION
          value: ${VERSION}
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: wundr-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: wundr-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: wundr-secrets
              key: jwt-secret
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: wundr-secrets
              key: github-token
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: wundr-data
          mountPath: /app/data
        - name: wundr-logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config/runtime
          readOnly: true
      volumes:
      - name: wundr-data
        persistentVolumeClaim:
          claimName: wundr-data-pvc
      - name: wundr-logs
        persistentVolumeClaim:
          claimName: wundr-logs-pvc
      - name: config
        configMap:
          name: wundr-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "environment"
        operator: "Equal"
        value: ${ENVIRONMENT}
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - wundr
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: wundr-service
  namespace: wundr-${ENVIRONMENT}
  labels:
    app: wundr
    environment: ${ENVIRONMENT}
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: wundr
    environment: ${ENVIRONMENT}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wundr-config
  namespace: wundr-${ENVIRONMENT}
data:
  app.json: |
    {
      "environment": "${ENVIRONMENT}",
      "logging": {
        "level": "${LOG_LEVEL:-info}",
        "format": "json"
      },
      "metrics": {
        "enabled": true,
        "port": 3000,
        "path": "/metrics"
      },
      "health": {
        "enabled": true,
        "timeout": 5000
      },
      "analysis": {
        "maxFileSize": "10MB",
        "maxFiles": 10000,
        "timeout": 300000
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wundr-data-pvc
  namespace: wundr-${ENVIRONMENT}
  labels:
    app: wundr
    environment: ${ENVIRONMENT}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ${STORAGE_CLASS:-gp2}
  resources:
    requests:
      storage: ${DATA_STORAGE_SIZE:-10Gi}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wundr-logs-pvc
  namespace: wundr-${ENVIRONMENT}
  labels:
    app: wundr
    environment: ${ENVIRONMENT}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ${STORAGE_CLASS:-gp2}
  resources:
    requests:
      storage: ${LOGS_STORAGE_SIZE:-5Gi}