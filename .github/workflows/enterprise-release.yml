name: 🚀 Enterprise Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
  release:
    types: [published, released]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      pre-release:
        description: 'Create pre-release'
        type: boolean
        default: false
      dry-run:
        description: 'Dry run (skip publishing)'
        type: boolean
        default: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  NODE_ENV: production
  CI: true
  FORCE_COLOR: 1

jobs:
  release-validation:
    name: 🔍 Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-release: ${{ steps.validation.outputs.should-release }}
      release-version: ${{ steps.version.outputs.version }}
      release-notes: ${{ steps.notes.outputs.notes }}
      is-prerelease: ${{ steps.validation.outputs.is-prerelease }}
      packages-to-publish: ${{ steps.packages.outputs.packages }}
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔍 Validate release conditions
        id: validation
        run: |
          echo "::group::Release Condition Validation"
          
          SHOULD_RELEASE="false"
          IS_PRERELEASE="false"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_RELEASE="true"
            if [[ "${{ github.event.inputs.release-type }}" == "prerelease" || "${{ github.event.inputs.pre-release }}" == "true" ]]; then
              IS_PRERELEASE="true"
            fi
            echo "Manual release triggered"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            SHOULD_RELEASE="true"
            if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
              IS_PRERELEASE="true"
            fi
            echo "GitHub release published"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v?[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            SHOULD_RELEASE="true"
            # Check if tag contains pre-release identifiers
            if [[ "${{ github.ref }}" =~ -(alpha|beta|rc|dev) ]]; then
              IS_PRERELEASE="true"
            fi
            echo "Tag-based release"
          fi
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Should release: $SHOULD_RELEASE"
          echo "Is pre-release: $IS_PRERELEASE"
          echo "::endgroup::"

      - name: 📝 Generate version
        id: version
        if: steps.validation.outputs.should-release == 'true'
        run: |
          echo "::group::Version Generation"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Install dependencies for version calculation
            pnpm install --frozen-lockfile --prefer-offline
            
            RELEASE_TYPE="${{ github.event.inputs.release-type }}"
            if [[ "$RELEASE_TYPE" == "prerelease" ]]; then
              VERSION=$(npm version prerelease --preid=beta --no-git-tag-version)
            else
              VERSION=$(npm version $RELEASE_TYPE --no-git-tag-version)
            fi
            echo "Generated version: $VERSION"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
            echo "Tag version: $VERSION"
          else
            VERSION=$(node -pe "require('./package.json').version")
            VERSION="v$VERSION"
            echo "Current version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"
          echo "::endgroup::"

      - name: 📋 Generate release notes
        id: notes
        if: steps.validation.outputs.should-release == 'true'
        run: |
          echo "::group::Release Notes Generation"
          
          NOTES=$(cat << 'EOF'
          ## 🚀 What's New in ${{ steps.version.outputs.version }}
          
          This release includes improvements, new features, and bug fixes across the Wundr platform.
          
          ### 📦 Installation
          
          ```bash
          # Install globally
          npm install -g @wundr/cli@${{ steps.version.outputs.version }}
          
          # Or with pnpm
          pnpm add -g @wundr/cli@${{ steps.version.outputs.version }}
          
          # Or with yarn
          yarn global add @wundr/cli@${{ steps.version.outputs.version }}
          ```
          
          ### 🔧 Usage
          
          ```bash
          # Get help
          wundr --help
          
          # Set up developer machine
          wundr computer-setup
          
          # Create new project
          wundr create my-awesome-project
          
          # Analyze existing codebase
          wundr analyze ./my-existing-project
          ```
          
          ### 📚 Documentation
          
          - [Getting Started](https://wundr.io/docs/getting-started)
          - [CLI Reference](https://wundr.io/docs/cli)
          - [API Documentation](https://wundr.io/docs/api)
          
          ### 🐛 Issues & Support
          
          - [Report Issues](https://github.com/adapticai/wundr/issues)
          - [Discussions](https://github.com/adapticai/wundr/discussions)
          
          ---
          
          **Full Changelog**: https://github.com/adapticai/wundr/compare/...
          EOF
          )
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: 📦 Detect packages to publish
        id: packages
        if: steps.validation.outputs.should-release == 'true'
        run: |
          echo "::group::Package Detection"
          
          # Find all publishable packages
          PACKAGES=$(find packages -name "package.json" -exec dirname {} \; | sort)
          PACKAGE_LIST=""
          
          for pkg_dir in $PACKAGES; do
            PKG_NAME=$(node -pe "require('./$pkg_dir/package.json').name")
            PKG_PRIVATE=$(node -pe "require('./$pkg_dir/package.json').private || false")
            
            if [[ "$PKG_PRIVATE" != "true" ]]; then
              echo "📦 Found publishable package: $PKG_NAME ($pkg_dir)"
              PACKAGE_LIST="$PACKAGE_LIST$PKG_NAME,"
            else
              echo "🔒 Skipping private package: $PKG_NAME ($pkg_dir)"
            fi
          done
          
          # Remove trailing comma
          PACKAGE_LIST=${PACKAGE_LIST%,}
          
          echo "packages=$PACKAGE_LIST" >> $GITHUB_OUTPUT
          echo "Packages to publish: $PACKAGE_LIST"
          echo "::endgroup::"

  comprehensive-testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: release-validation
    if: needs.release-validation.outputs.should-release == 'true'
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: 🔧 Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline

      - name: 🔍 Quality assurance
        run: |
          echo "::group::Quality Assurance Checks"
          pnpm typecheck
          pnpm lint --max-warnings=0
          pnpm format:check
          echo "::endgroup::"

      - name: 🧪 Full test suite
        run: |
          echo "::group::Comprehensive Test Suite"
          pnpm test:unit
          pnpm test:integration
          pnpm test:quality-gates
          echo "::endgroup::"

      - name: 🏗️ Production build
        run: |
          echo "::group::Production Build"
          NODE_ENV=production pnpm build
          echo "::endgroup::"

      - name: 📦 Package verification
        if: matrix.node-version == 20
        run: |
          echo "::group::Package Structure Verification"
          
          # Verify all packages have required files
          for pkg_dir in packages/*; do
            if [[ -d "$pkg_dir" && -f "$pkg_dir/package.json" ]]; then
              echo "Checking $pkg_dir..."
              
              # Check for dist directory
              if [[ ! -d "$pkg_dir/dist" ]]; then
                echo "❌ Missing dist directory in $pkg_dir"
                exit 1
              fi
              
              # Check for main entry point
              MAIN=$(node -pe "require('./$pkg_dir/package.json').main || 'dist/index.js'")
              if [[ ! -f "$pkg_dir/$MAIN" ]]; then
                echo "❌ Missing main entry point $pkg_dir/$MAIN"
                exit 1
              fi
              
              echo "✅ $pkg_dir structure verified"
            fi
          done
          echo "::endgroup::"

      - name: 🎭 E2E smoke tests
        if: matrix.node-version == 20
        run: |
          echo "::group::E2E Smoke Tests"
          pnpm exec playwright install --with-deps chromium
          pnpm test:e2e --grep="smoke|critical" --max-failures=3
          echo "::endgroup::"

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: release-validation
    if: needs.release-validation.outputs.should-release == 'true'
    timeout-minutes: 15
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🔍 Security vulnerability scan
        run: |
          echo "::group::Security Vulnerability Scan"
          pnpm audit --audit-level high --json > security-audit.json || true
          
          # Parse audit results
          CRITICAL=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [[ $CRITICAL -gt 0 ]]; then
            echo "::error::Critical security vulnerabilities found! Cannot proceed with release."
            cat security-audit.json | jq '.vulnerabilities'
            exit 1
          fi
          
          if [[ $HIGH -gt 3 ]]; then
            echo "::warning::High number of high-severity vulnerabilities: $HIGH"
            echo "Consider addressing these before release."
          fi
          echo "::endgroup::"

      - name: 📝 License compliance check
        run: |
          echo "::group::License Compliance Check"
          
          # Install license checker if not already available
          pnpm add --dev license-checker
          
          # Generate license report
          pnpm exec license-checker --summary --excludePrivatePackages --json > licenses.json
          
          # Check for prohibited licenses
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          
          for license in "${PROHIBITED_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "::error::Prohibited license found: $license"
              exit 1
            fi
          done
          
          echo "✅ License compliance check passed"
          echo "::endgroup::"

  create-github-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-validation, comprehensive-testing, security-audit]
    if: needs.release-validation.outputs.should-release == 'true' && !inputs.dry-run
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 🔧 Install and build
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          NODE_ENV=production pnpm build

      - name: 📦 Create release artifacts
        run: |
          echo "::group::Creating Release Artifacts"
          mkdir -p release-artifacts
          
          # Create source archive
          git archive --format=tar.gz --prefix=wundr-${{ needs.release-validation.outputs.release-version }}/ \
            HEAD > release-artifacts/wundr-${{ needs.release-validation.outputs.release-version }}-source.tar.gz
          
          # Create build archive
          tar -czf release-artifacts/wundr-${{ needs.release-validation.outputs.release-version }}-build.tar.gz \
            packages/*/dist apps/*/dist apps/*/.next
          
          # Create checksums
          cd release-artifacts
          sha256sum *.tar.gz > checksums.txt
          cd ..
          
          ls -la release-artifacts/
          echo "::endgroup::"

      - name: 🏷️ Create GitHub Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.release-validation.outputs.release-version }}
          name: 'Wundr ${{ needs.release-validation.outputs.release-version }}'
          body: ${{ needs.release-validation.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.release-validation.outputs.is-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "release-artifacts/*"
          artifactContentType: "application/gzip"
          generateReleaseNotes: true
          makeLatest: ${{ needs.release-validation.outputs.is-prerelease != 'true' }}

  npm-publish:
    name: 📡 NPM Publishing
    runs-on: ubuntu-latest
    needs: [release-validation, create-github-release]
    if: needs.release-validation.outputs.should-release == 'true' && !inputs.dry-run
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(format('[{0}]', needs.release-validation.outputs.packages-to-publish)) }}
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔧 Install and build
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          pnpm build

      - name: 📋 Update package versions
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.release-validation.outputs.release-version }}"
          VERSION_NO_V=${VERSION#v}
          
          echo "::group::Updating Package Versions to $VERSION_NO_V"
          
          # Find and update the specific package
          PACKAGE_DIR=$(find packages -name "package.json" -exec dirname {} \; | xargs -I {} bash -c '
            if grep -q "\"name\".*\"${{ matrix.package }}\"" {}/package.json; then echo {}; fi
          ')
          
          if [[ -n "$PACKAGE_DIR" ]]; then
            echo "Updating $PACKAGE_DIR to version $VERSION_NO_V"
            cd "$PACKAGE_DIR"
            npm version "$VERSION_NO_V" --no-git-tag-version
            cd - > /dev/null
          fi
          echo "::endgroup::"

      - name: 🔍 Pre-publish validation
        run: |
          echo "::group::Pre-publish Validation for ${{ matrix.package }}"
          
          PACKAGE_DIR=$(find packages -name "package.json" -exec dirname {} \; | xargs -I {} bash -c '
            if grep -q "\"name\".*\"${{ matrix.package }}\"" {}/package.json; then echo {}; fi
          ')
          
          if [[ -z "$PACKAGE_DIR" ]]; then
            echo "::error::Package ${{ matrix.package }} not found"
            exit 1
          fi
          
          if [[ ! -d "$PACKAGE_DIR/dist" ]]; then
            echo "::error::No build artifacts found for ${{ matrix.package }}"
            exit 1
          fi
          
          echo "✅ Package ${{ matrix.package }} ready for publishing"
          echo "Package directory: $PACKAGE_DIR"
          echo "Build artifacts: $(ls -la $PACKAGE_DIR/dist | wc -l) files"
          echo "::endgroup::"

      - name: 📡 Publish to NPM
        run: |
          echo "::group::Publishing ${{ matrix.package }} to NPM"
          
          PACKAGE_DIR=$(find packages -name "package.json" -exec dirname {} \; | xargs -I {} bash -c '
            if grep -q "\"name\".*\"${{ matrix.package }}\"" {}/package.json; then echo {}; fi
          ')
          
          if [[ -n "$PACKAGE_DIR" && -d "$PACKAGE_DIR/dist" ]]; then
            cd "$PACKAGE_DIR"
            
            # Verify package before publishing
            npm pack --dry-run
            
            # Publish based on release type
            if [[ "${{ needs.release-validation.outputs.is-prerelease }}" == "true" ]]; then
              echo "Publishing as pre-release (beta tag)"
              npm publish --tag beta --access public
            else
              echo "Publishing as stable release"
              npm publish --access public
            fi
            
            echo "✅ Successfully published ${{ matrix.package }}"
          else
            echo "::error::Cannot publish ${{ matrix.package }} - package not found or missing build"
            exit 1
          fi
          echo "::endgroup::"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🔍 Verify publication
        run: |
          echo "::group::Verifying NPM Publication"
          
          # Wait a moment for NPM registry to update
          sleep 10
          
          VERSION="${{ needs.release-validation.outputs.release-version }}"
          VERSION_NO_V=${VERSION#v}
          
          # Check if package is available
          if npm view "${{ matrix.package }}@$VERSION_NO_V" version; then
            echo "✅ Package ${{ matrix.package }}@$VERSION_NO_V is available on NPM"
          else
            echo "::warning::Package may not be immediately available on NPM registry"
          fi
          echo "::endgroup::"

  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: [release-validation, create-github-release]
    if: needs.release-validation.outputs.should-release == 'true' && !inputs.dry-run
    timeout-minutes: 25
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME != '' && format('{0}/wundr', secrets.DOCKER_USERNAME) || '' }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=beta,enable=${{ needs.release-validation.outputs.is-prerelease == 'true' }}

      - name: 🐳 Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release-validation.outputs.release-version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

  post-release-validation:
    name: ✅ Post-Release Validation
    runs-on: ubuntu-latest
    needs: [release-validation, npm-publish, docker-release]
    if: always() && needs.release-validation.outputs.should-release == 'true' && !inputs.dry-run
    timeout-minutes: 15
    steps:
      - name: 📊 Validation summary
        run: |
          echo "::group::Release Validation Summary"
          echo "Release Version: ${{ needs.release-validation.outputs.release-version }}"
          echo "Pre-release: ${{ needs.release-validation.outputs.is-prerelease }}"
          echo "NPM Publish: ${{ needs.npm-publish.result }}"
          echo "Docker Release: ${{ needs.docker-release.result }}"
          echo "::endgroup::"

      - name: 🔍 Verify NPM packages
        run: |
          echo "::group::NPM Package Verification"
          
          IFS=',' read -ra PACKAGES <<< "${{ needs.release-validation.outputs.packages-to-publish }}"
          VERSION="${{ needs.release-validation.outputs.release-version }}"
          VERSION_NO_V=${VERSION#v}
          
          for package in "${PACKAGES[@]}"; do
            if [[ -n "$package" ]]; then
              echo "Checking $package@$VERSION_NO_V..."
              
              # Wait for NPM registry propagation
              for i in {1..5}; do
                if npm view "$package@$VERSION_NO_V" version > /dev/null 2>&1; then
                  echo "✅ $package@$VERSION_NO_V is available"
                  break
                elif [[ $i -eq 5 ]]; then
                  echo "⚠️ $package@$VERSION_NO_V may not be available yet"
                else
                  echo "Waiting for NPM registry update... ($i/5)"
                  sleep 30
                fi
              done
            fi
          done
          echo "::endgroup::"

      - name: 🎯 Success notification
        if: needs.npm-publish.result == 'success' && needs.docker-release.result == 'success'
        run: |
          echo "::notice::🎉 Release ${{ needs.release-validation.outputs.release-version }} completed successfully!"
          echo "::notice::📦 NPM packages published"
          echo "::notice::🐳 Docker images built and pushed"

      - name: ⚠️ Partial failure notification
        if: needs.npm-publish.result != 'success' || needs.docker-release.result != 'success'
        run: |
          echo "::warning::⚠️ Release completed with some issues:"
          echo "::warning::NPM Publish: ${{ needs.npm-publish.result }}"
          echo "::warning::Docker Release: ${{ needs.docker-release.result }}"

  notification-hub:
    name: 📢 Notification Hub
    runs-on: ubuntu-latest
    needs: [release-validation, post-release-validation, create-github-release]
    if: always() && needs.release-validation.outputs.should-release == 'true'
    timeout-minutes: 5
    steps:
      - name: 📢 Slack release notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.post-release-validation.result == 'success' && 'success' || 'failure' }}
          channel: '#releases'
          author_name: 'Wundr Release Pipeline'
          text: |
            🚀 **Wundr ${{ needs.release-validation.outputs.release-version }} Released**
            
            📦 **NPM Publishing:** ${{ needs.npm-publish.result }}
            🐳 **Docker Release:** ${{ needs.docker-release.result }}
            🔍 **Validation:** ${{ needs.post-release-validation.result }}
            
            🔗 **GitHub Release:** ${{ needs.create-github-release.outputs.release-url }}
            📚 **Documentation:** https://wundr.io/docs
            
            ${{ needs.release-validation.outputs.is-prerelease == 'true' && '⚠️ This is a pre-release' || '✅ Stable release available' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Team notification
        if: env.TEAM_EMAIL != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚀 Wundr ${{ needs.release-validation.outputs.release-version }} Released'
          to: ${{ secrets.TEAM_EMAIL }}
          from: 'Wundr Releases <releases@wundr.io>'
          body: |
            Wundr ${{ needs.release-validation.outputs.release-version }} has been successfully released!
            
            Release Details:
            - Version: ${{ needs.release-validation.outputs.release-version }}
            - Type: ${{ needs.release-validation.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable' }}
            - GitHub: ${{ needs.create-github-release.outputs.release-url }}
            
            Status:
            - NPM Publishing: ${{ needs.npm-publish.result }}
            - Docker Release: ${{ needs.docker-release.result }}
            
            Installation:
            npm install -g @wundr/cli@${{ needs.release-validation.outputs.release-version }}
            
            Documentation: https://wundr.io/docs