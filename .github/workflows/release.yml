name: Release

on:
  push:
    branches: [master]
    paths:
      - 'CHANGELOG.md'
      - 'package.json'
      - 'packages/*/package.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Validate release readiness
  validate-release:
    name: Validate Release Readiness
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if release is needed
        id: check
        run: |
          # Check if this is a manual release or if changes warrant a release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Check for changes in key files since last release
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -z "$LAST_TAG" ]] || git diff --name-only "$LAST_TAG"..HEAD | grep -E "(src/|package\.json|CHANGELOG\.md)"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Determine version
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual release - use input
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Automatic release - determine from commits
            if git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD | grep -i "breaking\|major"; then
              RELEASE_TYPE="major"
            elif git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD | grep -i "feat\|feature\|minor"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi
          
          # Calculate new version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(npx semver -i $RELEASE_TYPE $CURRENT_VERSION)
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "Release type: $RELEASE_TYPE"

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release]
    if: needs.validate-release.outputs.should_release == 'true'
    permissions:
      contents: write
      packages: write
      pull-requests: write
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version
        run: |
          # Update package.json version
          npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version
          
          # Update workspace package versions
          pnpm -r exec npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version

      - name: Generate changelog
        run: |
          # Generate changelog for this release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          echo "# Changelog" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "## [${{ needs.validate-release.outputs.version }}] - $(date +%Y-%m-%d)" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          
          # Group commits by type
          echo "### Features" >> RELEASE_CHANGELOG.md
          git log --oneline "$LAST_TAG"..HEAD | grep -i "feat\|feature" | sed 's/^/- /' >> RELEASE_CHANGELOG.md || echo "- No new features" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          
          echo "### Bug Fixes" >> RELEASE_CHANGELOG.md  
          git log --oneline "$LAST_TAG"..HEAD | grep -i "fix\|bug" | sed 's/^/- /' >> RELEASE_CHANGELOG.md || echo "- No bug fixes" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          
          echo "### Other Changes" >> RELEASE_CHANGELOG.md
          git log --oneline "$LAST_TAG"..HEAD | grep -v -i "feat\|feature\|fix\|bug" | sed 's/^/- /' >> RELEASE_CHANGELOG.md || echo "- No other changes" >> RELEASE_CHANGELOG.md

      - name: Build packages
        run: |
          pnpm build
          
          # Create distribution archives
          mkdir -p dist/
          tar -czf dist/wundr-${{ needs.validate-release.outputs.version }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='dist' \
            .

      - name: Commit and tag
        run: |
          git add .
          git commit -m "chore(release): v${{ needs.validate-release.outputs.version }}"
          git tag -a "v${{ needs.validate-release.outputs.version }}" -m "Release v${{ needs.validate-release.outputs.version }}"
          git push origin master --tags

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, 'pre') }}

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/wundr-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_name: wundr-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Publish to NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    if: |
      needs.validate-release.outputs.should_release == 'true' && 
      !contains(needs.validate-release.outputs.version, 'pre')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.validate-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Publish to NPM
        run: |
          # Publish main package
          npm publish --access public
          
          # Publish workspace packages (if they exist and are publishable)
          pnpm -r --filter='!@wundr/private-*' publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and publish Docker images
  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    if: needs.validate-release.outputs.should_release == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.validate-release.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            wundr/wundr
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Create deployment PR for staging
  create-deployment-pr:
    name: Create Deployment PR
    runs-on: ubuntu-latest
    needs: [create-release, validate-release, publish-docker]
    if: needs.validate-release.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create deployment branch
        run: |
          BRANCH_NAME="deploy/v${{ needs.validate-release.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          
          # Update any deployment configurations
          sed -i "s/VERSION: .*/VERSION: v${{ needs.validate-release.outputs.version }}/" k8s/deployment.yaml
          
          git add .
          git commit -m "deploy: update to v${{ needs.validate-release.outputs.version }}"
          git push origin "$BRANCH_NAME"

      - name: Create deployment PR
        uses: repo-sync/pull-request@v2
        with:
          source_branch: deploy/v${{ needs.validate-release.outputs.version }}
          destination_branch: master
          pr_title: "🚀 Deploy v${{ needs.validate-release.outputs.version }} to Production"
          pr_body: |
            ## Release Deployment
            
            This PR updates the deployment configuration for release v${{ needs.validate-release.outputs.version }}.
            
            ### Changes
            - Updated Kubernetes deployment manifests
            - Docker image version: `v${{ needs.validate-release.outputs.version }}`
            
            ### Pre-deployment Checklist
            - [x] Release created and published
            - [x] Docker images built and pushed
            - [ ] Staging deployment verified
            - [ ] Production deployment approved
            
            **Release Notes:** See [Release v${{ needs.validate-release.outputs.version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }})
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Notify team
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    if: always() && needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.create-release.result }}
          text: |
            🎉 New release created!
            Version: v${{ needs.validate-release.outputs.version }}
            Status: ${{ needs.create-release.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue for post-release tasks
        if: needs.create-release.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release tasks for v${{ needs.validate-release.outputs.version }}`,
              body: `## Post-release Tasks
              
              Release v${{ needs.validate-release.outputs.version }} has been created.
              
              ### Tasks
              - [ ] Verify deployment to staging
              - [ ] Update documentation
              - [ ] Announce release to community
              - [ ] Monitor release metrics
              
              **Release Link:** [v${{ needs.validate-release.outputs.version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }})`,
              labels: ['release', 'post-release-tasks']
            });