name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - alpha
      create_tag:
        description: 'Create git tag'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      release-notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            # Ensure version starts with 'v'
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease
          if [[ "$VERSION" =~ -(alpha|beta|rc) ]] || [ "${{ github.event.inputs.release_type }}" != "stable" ]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Release version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION is available"

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git tag -l --sort=-version:refname | head -1)
          
          if [ -n "$PREV_TAG" ]; then
            echo "Generating release notes from $PREV_TAG to HEAD"
            
            # Generate changelog
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^refactor\|^docs\|^style\|^test\|^chore" --reverse)
            
            # Categorize commits
            FEATURES=$(echo "$CHANGELOG" | grep -E "^- (feat|feature)" || true)
            FIXES=$(echo "$CHANGELOG" | grep -E "^- (fix|bug)" || true)
            REFACTORS=$(echo "$CHANGELOG" | grep -E "^- refactor" || true)
            DOCS=$(echo "$CHANGELOG" | grep -E "^- docs" || true)
            OTHERS=$(echo "$CHANGELOG" | grep -vE "^- (feat|feature|fix|bug|refactor|docs)" || true)
            
            # Build release notes
            RELEASE_NOTES="# Release $VERSION

## What's New in This Release

This release of the Monorepo Refactoring Toolkit includes improvements to code analysis, consolidation tools, and CI/CD workflows.

"
            
            if [ -n "$FEATURES" ]; then
              RELEASE_NOTES+="### ✨ New Features
$FEATURES

"
            fi
            
            if [ -n "$FIXES" ]; then
              RELEASE_NOTES+="### 🐛 Bug Fixes
$FIXES

"
            fi
            
            if [ -n "$REFACTORS" ]; then
              RELEASE_NOTES+="### 🔧 Refactoring
$REFACTORS

"
            fi
            
            if [ -n "$DOCS" ]; then
              RELEASE_NOTES+="### 📚 Documentation
$DOCS

"
            fi
            
            if [ -n "$OTHERS" ]; then
              RELEASE_NOTES+="### 🔄 Other Changes
$OTHERS

"
            fi
          else
            echo "No previous tags found, generating initial release notes"
            RELEASE_NOTES="# Release $VERSION

## Initial Release

This is the initial release of the Monorepo Refactoring Toolkit - a comprehensive set of tools and workflows for refactoring codebases into monorepo structures.

### 🚀 Key Features

- **Code Analysis Tools**: Deep TypeScript/JavaScript AST analysis for detecting duplicates, unused code, and patterns
- **Consolidation Scripts**: Automated tools for merging duplicate code and cleaning up unused exports
- **Governance System**: Drift detection and automated quality checks
- **CI/CD Workflows**: Complete GitHub Actions workflows for continuous integration and quality assurance
- **Documentation**: Comprehensive guides and training materials
- **Templates**: Ready-to-use templates for packages, services, and configurations

### 📦 What's Included

- Analysis scripts with visual dashboards
- Consolidation and cleanup automation
- Weekly progress reporting
- Quality gates and validation
- Team training materials
- Best practices documentation

"
          fi
          
          RELEASE_NOTES+="## 📋 Installation & Usage

\`\`\`bash
# Clone the repository
git clone https://github.com/${{ github.repository }}.git
cd monorepo-refactoring-toolkit

# Run setup
./setup/install.sh

# Start with the quick start guide
open docs/guides/QUICK_START.md
\`\`\`

## 🔗 Links

- [Quick Start Guide](./docs/guides/QUICK_START.md)
- [Complete Strategy](./docs/guides/COMPLETE_STRATEGY.md)
- [Architecture Documentation](./docs/architecture/MONOREPO_STRUCTURE.md)
- [Team Training Guide](./docs/training/TEAM_TRAINING_GUIDE.md)

## 🤝 Contributing

See our [contribution guidelines](./CONTRIBUTING.md) for how to get involved.

---

**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}
"
          
          # Save release notes to file and output
          echo "$RELEASE_NOTES" > release-notes.md
          
          # For GitHub output, we need to handle multiline properly
          {
            echo 'release-notes<<EOF'
            echo "$RELEASE_NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  build-artifacts:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'setup/package.json'

      - name: Install dependencies
        working-directory: setup
        run: |
          npm ci
          npm install --save-dev \
            typescript \
            ts-node \
            @types/node

      - name: Create release artifacts
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Create release directory
          mkdir -p release-artifacts
          
          # Create a comprehensive toolkit package
          echo "Building release package..."
          
          # Copy all essential files
          cp -r scripts release-artifacts/
          cp -r config release-artifacts/
          cp -r docs release-artifacts/
          cp -r templates release-artifacts/
          cp -r tools release-artifacts/
          cp -r examples release-artifacts/
          cp -r setup release-artifacts/
          
          # Copy root files
          cp README.md release-artifacts/
          cp LICENSE release-artifacts/
          cp IMPLEMENTATION_CHECKLIST.md release-artifacts/
          
          # Create version info
          cat > release-artifacts/VERSION << EOF
          Version: $VERSION
          Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          Git Commit: ${{ github.sha }}
          Build Number: ${{ github.run_number }}
          EOF
          
          # Create installation script
          cat > release-artifacts/install.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          echo "🚀 Installing Monorepo Refactoring Toolkit..."
          
          # Make scripts executable
          find scripts -name "*.sh" -exec chmod +x {} \;
          find setup -name "*.sh" -exec chmod +x {} \;
          chmod +x config/git/hooks/pre-commit
          
          # Run setup
          if [ -f "setup/install.sh" ]; then
            ./setup/install.sh
          fi
          
          echo "✅ Installation complete!"
          echo "📚 See docs/guides/QUICK_START.md to get started"
          EOF
          
          chmod +x release-artifacts/install.sh
          
          # Create compressed archives
          cd release-artifacts
          tar -czf ../monorepo-refactoring-toolkit-${VERSION}.tar.gz .
          zip -r ../monorepo-refactoring-toolkit-${VERSION}.zip .
          cd ..
          
          # Generate checksums
          sha256sum monorepo-refactoring-toolkit-${VERSION}.tar.gz > monorepo-refactoring-toolkit-${VERSION}.tar.gz.sha256
          sha256sum monorepo-refactoring-toolkit-${VERSION}.zip > monorepo-refactoring-toolkit-${VERSION}.zip.sha256
          
          echo "✅ Release artifacts created"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ needs.validate-release.outputs.version }}
          path: |
            monorepo-refactoring-toolkit-*.tar.gz
            monorepo-refactoring-toolkit-*.zip
            monorepo-refactoring-toolkit-*.sha256
            release-notes.md
          retention-days: 90

  run-tests:
    uses: ./.github/workflows/test.yml
    needs: validate-release
    with:
      test_scope: 'full'

  create-tag:
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, run-tests]
    if: github.event.inputs.create_tag != 'false' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          git config --global user.name 'Release Bot'
          git config --global user.email 'noreply@github.com'
          
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
          echo "✅ Created and pushed tag: $VERSION"

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, run-tests]
    if: needs.run-tests.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-${{ needs.validate-release.outputs.version }}
          path: ./artifacts

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const version = '${{ needs.validate-release.outputs.version }}';
            const isPrerelease = '${{ needs.validate-release.outputs.is-prerelease }}' === 'true';
            
            // Read release notes
            const releaseNotes = fs.readFileSync('./artifacts/release-notes.md', 'utf8');
            
            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Monorepo Refactoring Toolkit ${version}`,
              body: releaseNotes,
              draft: false,
              prerelease: isPrerelease,
              generate_release_notes: false
            });
            
            console.log(`Created release: ${release.html_url}`);
            
            // Upload artifacts
            const artifactsDir = './artifacts';
            const files = fs.readdirSync(artifactsDir);
            
            for (const file of files) {
              if (file.endsWith('.tar.gz') || file.endsWith('.zip') || file.endsWith('.sha256')) {
                const filePath = path.join(artifactsDir, file);
                const fileContent = fs.readFileSync(filePath);
                
                console.log(`Uploading ${file}...`);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: file,
                  data: fileContent
                });
                
                console.log(`✅ Uploaded ${file}`);
              }
            }
            
            // Output release URL
            core.setOutput('release-url', release.html_url);
            core.setOutput('release-id', release.id);

      - name: Create release summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "# 🎉 Release Summary" > release-summary.md
          echo "" >> release-summary.md
          echo "**Version:** $VERSION" >> release-summary.md
          echo "**Type:** $([ "$IS_PRERELEASE" = "true" ] && echo "Pre-release" || echo "Stable")" >> release-summary.md
          echo "**Build:** ${{ github.run_number }}" >> release-summary.md
          echo "**Commit:** ${{ github.sha }}" >> release-summary.md
          echo "" >> release-summary.md
          echo "## 📦 Artifacts" >> release-summary.md
          echo "" >> release-summary.md
          echo "- \`monorepo-refactoring-toolkit-${VERSION}.tar.gz\` - Complete toolkit (tar.gz)" >> release-summary.md
          echo "- \`monorepo-refactoring-toolkit-${VERSION}.zip\` - Complete toolkit (zip)" >> release-summary.md
          echo "- Checksum files for verification" >> release-summary.md
          echo "" >> release-summary.md
          echo "## 🚀 Quick Start" >> release-summary.md
          echo "" >> release-summary.md
          echo "\`\`\`bash" >> release-summary.md
          echo "# Download and extract" >> release-summary.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/monorepo-refactoring-toolkit-${VERSION}.tar.gz" >> release-summary.md
          echo "tar -xzf monorepo-refactoring-toolkit-${VERSION}.tar.gz" >> release-summary.md
          echo "cd monореpos-refactoring-toolkit" >> release-summary.md
          echo "" >> release-summary.md
          echo "# Install and setup" >> release-summary.md
          echo "./install.sh" >> release-summary.md
          echo "\`\`\`" >> release-summary.md

      - name: Upload release summary
        uses: actions/upload-artifact@v3
        with:
          name: release-summary-${{ needs.validate-release.outputs.version }}
          path: release-summary.md
          retention-days: 30

  post-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Create release announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const releaseUrl = '${{ needs.create-release.outputs.release-url }}';
            const isPrerelease = '${{ needs.validate-release.outputs.is-prerelease }}' === 'true';
            
            const title = `🎉 Release ${version} is now available!`;
            const emoji = isPrerelease ? '🚧' : '🎉';
            const typeLabel = isPrerelease ? 'Pre-release' : 'Stable Release';
            
            const body = `${emoji} **${typeLabel} ${version}** has been published!
            
            ## 📦 What's New
            
            Check out the [full release notes](${releaseUrl}) for detailed information about what's included in this release.
            
            ## 🚀 Get Started
            
            \`\`\`bash
            # Download the latest release
            wget https://github.com/${{ github.repository }}/releases/download/${version}/monorepo-refactoring-toolkit-${version}.tar.gz
            
            # Extract and install
            tar -xzf monorepo-refactoring-toolkit-${version}.tar.gz
            cd monorepo-refactoring-toolkit
            ./install.sh
            \`\`\`
            
            ## 📚 Documentation
            
            - [Quick Start Guide](./docs/guides/QUICK_START.md)
            - [Complete Strategy](./docs/guides/COMPLETE_STRATEGY.md)
            - [Team Training](./docs/training/TEAM_TRAINING_GUIDE.md)
            
            ## 🔗 Links
            
            - **Release Page:** ${releaseUrl}
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ${isPrerelease ? '⚠️ **Note:** This is a pre-release version. Use with caution in production environments.' : ''}
            
            ---
            
            Happy refactoring! 🛠️
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release', 'announcement', isPrerelease ? 'prerelease' : 'stable']
            });

      - name: Notify completion
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "🎉 Release $VERSION completed successfully!"
          echo "📦 Type: $([ "$IS_PRERELEASE" = "true" ] && echo "Pre-release" || echo "Stable")"
          echo "🔗 Release URL: ${{ needs.create-release.outputs.release-url }}"
          echo "🚀 Ready for distribution!"

  cleanup:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, post-release]
    if: always()
    steps:
      - name: Cleanup old pre-releases
        if: needs.validate-release.outputs.is-prerelease == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up old pre-releases when a stable release is made
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50
            });
            
            const oldPrereleases = releases.filter(release => 
              release.prerelease && 
              release.tag_name !== '${{ needs.validate-release.outputs.version }}'
            );
            
            // Keep the 3 most recent pre-releases
            const toDelete = oldPrereleases.slice(3);
            
            for (const release of toDelete) {
              console.log(`Deleting old pre-release: ${release.tag_name}`);
              
              try {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Also delete the tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
                
                console.log(`✅ Deleted ${release.tag_name}`);
              } catch (error) {
                console.log(`⚠️ Could not delete ${release.tag_name}: ${error.message}`);
              }
            }
            
            console.log(`Cleanup complete. Removed ${toDelete.length} old pre-releases.`);