name: 🔄 Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

concurrency:
  group: dependency-updates
  cancel-in-progress: false

env:
  NODE_ENV: test
  CI: true

jobs:
  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: 🔍 Check current dependencies
        run: |
          echo "::group::Current Dependencies Status"
          pnpm outdated || true
          echo "::endgroup::"

      - name: 📦 Update dependencies
        id: update
        run: |
          echo "::group::Updating Dependencies"
          UPDATE_TYPE="${{ github.event.inputs.update-type || 'patch' }}"
          
          case $UPDATE_TYPE in
            patch)
              pnpm update --latest --filter-prod
              ;;
            minor)
              pnpm update --latest
              ;;
            major)
              pnpm update --latest --depth -1
              ;;
            all)
              pnpm update --latest --depth -1
              pnpm update --dev --latest --depth -1
              ;;
          esac
          
          # Check if there are changes
          if git diff --quiet pnpm-lock.yaml package.json packages/*/package.json; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates needed"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Dependencies updated"
          fi
          echo "::endgroup::"

      - name: 🧪 Test updated dependencies
        if: steps.update.outputs.has-changes == 'true'
        run: |
          echo "::group::Testing Updated Dependencies"
          pnpm install
          pnpm typecheck
          pnpm lint
          pnpm test:unit
          pnpm build
          echo "::endgroup::"

      - name: 📊 Generate update summary
        if: steps.update.outputs.has-changes == 'true'
        id: summary
        run: |
          echo "::group::Generating Update Summary"
          
          # Get updated packages
          UPDATED_PACKAGES=$(git diff --name-only | grep -E "(package\.json|pnpm-lock\.yaml)" | head -10)
          
          # Create summary
          cat > update_summary.md << 'EOF'
          ## 📦 Dependency Updates
          
          This automated PR updates project dependencies to their latest compatible versions.
          
          ### 🔄 Update Type
          **${{ github.event.inputs.update-type || 'patch' }}** level updates
          
          ### 📋 Changed Files
          ```
          $UPDATED_PACKAGES
          ```
          
          ### ✅ Tests Status
          - [x] TypeScript compilation
          - [x] ESLint checks
          - [x] Unit tests
          - [x] Build process
          
          ### 🔍 Review Checklist
          - [ ] Review breaking changes in updated packages
          - [ ] Test critical functionality manually
          - [ ] Check for security advisories
          - [ ] Verify CI passes
          
          ---
          🤖 This PR was created automatically by the dependency update workflow.
          EOF
          
          echo "summary-path=update_summary.md" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: 🔧 Create Pull Request
        if: steps.update.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 Update dependencies (${{ github.event.inputs.update-type || 'patch' }} level)
            
            - Updated packages to latest compatible versions
            - All tests passing
            - Ready for review
          title: '🔄 Dependency Updates (${{ github.event.inputs.update-type || 'patch' }} level)'
          body-path: ${{ steps.summary.outputs.summary-path }}
          branch: dependency-updates/${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ github.event.inputs.update-type || 'patch' }}
          reviewers: |
            ${{ github.actor }}
          assignees: |
            ${{ github.actor }}

      - name: 📢 Notify if no updates
        if: steps.update.outputs.has-changes == 'false'
        run: |
          echo "::notice::No dependency updates needed. All packages are up to date."

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Security audit
        run: |
          echo "::group::Security Audit Results"
          pnpm audit --audit-level moderate
          echo "::endgroup::"

      - name: 📊 Create security issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🔒 Security Vulnerabilities Detected';
            const body = `
            ## Security Audit Failed
            
            The automated security audit has detected vulnerabilities in project dependencies.
            
            ### Next Steps
            1. Review the audit results in the workflow logs
            2. Update vulnerable packages manually
            3. Run \`pnpm audit --fix\` if possible
            4. Consider alternative packages if fixes aren't available
            
            ### Workflow Details
            - **Run:** ${{ github.run_id }}
            - **Triggered by:** ${{ github.event_name }}
            - **Date:** ${{ new Date().toISOString() }}
            
            This issue was created automatically by the security audit workflow.
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'high-priority']
              });
            }