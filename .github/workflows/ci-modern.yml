name: Modern CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        type: boolean
        default: false
      environment:
        description: 'Target environment'
        type: choice
        options:
          - development
          - staging
          - production
        default: development

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
      configs: ${{ steps.changes.outputs.configs }}
      workflows: ${{ steps.changes.outputs.workflows }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'scripts/**'
              - 'tools/**'
            tests:
              - 'tests/**'
              - '**/*.test.ts'
              - '**/*.spec.ts'
            docs:
              - 'docs/**'
              - '*.md'
            configs:
              - 'config/**'
              - '*.config.*'
              - 'tsconfig*.json'
            workflows:
              - '.github/workflows/**'
            dependencies:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - '**/package.json'

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dependencies == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: |
          pnpm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          if pnpm audit --audit-level high --json > /dev/null 2>&1; then
            echo "✅ No high/critical vulnerabilities found"
          else
            echo "⚠️ High/critical vulnerabilities detected"
            pnpm audit --audit-level high
            exit 1
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 7

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.configs == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm typecheck

      - name: Lint code
        run: pnpm lint --max-warnings 0

      - name: Check formatting
        run: pnpm format:check

      - name: Build project
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            tools/web-client/dist/
            tools/web-client/.next/
          retention-days: 7

  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, quality-checks]
    if: (needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.tests == 'true' || github.event_name == 'workflow_dispatch') && !github.event.inputs.skip_tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['18', '20', '21']
        include:
          - os: ubuntu-latest
            node-version: '20'
            coverage: true
          - os: ubuntu-latest
            node-version: '20'
            e2e: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Run unit tests
        run: pnpm test --ci
        env:
          NODE_ENV: test

      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        run: pnpm test:integration --ci
        env:
          NODE_ENV: test

      - name: Run E2E tests
        if: matrix.e2e == true
        run: |
          pnpm test:e2e --ci
        env:
          NODE_ENV: test

      - name: Generate coverage report
        if: matrix.coverage == true
        run: pnpm test:coverage --ci

      - name: Upload coverage to Codecov
        if: matrix.coverage == true
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks]
    if: needs.detect-changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Run performance benchmarks
        run: |
          pnpm run benchmark --output-format json > benchmark-results.json
        continue-on-error: true

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'benchmarkjs'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: false

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.workflows == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            wundr:${{ github.sha }}
            wundr:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/wundr-image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/wundr-image.tar
          retention-days: 1

      - name: Test Docker image
        run: |
          docker load --input /tmp/wundr-image.tar
          
          # Test basic functionality
          docker run --rm wundr:latest --version
          docker run --rm wundr:latest --help
          
          # Test health endpoint if available
          if docker run --rm -d --name wundr-test -p 3000:3000 wundr:latest; then
            sleep 10
            curl -f http://localhost:3000/health || echo "Health check failed"
            docker stop wundr-test
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true' || needs.detect-changes.outputs.src == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check documentation completeness
        run: |
          echo "Checking for required documentation..."
          
          REQUIRED_DOCS=(
            "README.md"
            "CHANGELOG.md"
            "CONTRIBUTING.md"
            "docs/guides/QUICK_START.md"
            "docs/guides/COMPLETE_STRATEGY.md"
          )
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [[ ! -f "$doc" ]]; then
              echo "❌ Missing required documentation: $doc"
              exit 1
            fi
            
            # Check if file has meaningful content
            if [[ $(wc -l < "$doc") -lt 10 ]]; then
              echo "⚠️ Documentation file $doc appears incomplete"
            fi
          done
          
          echo "✅ Documentation completeness check passed"

      - name: Validate markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

  status-summary:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [security-audit, quality-checks, test-matrix, performance-benchmarks, docker-build, dependency-review, docs-check]
    if: always()
    steps:
      - name: Generate status summary
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Benchmarks | ${{ needs.performance-benchmarks.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Check | ${{ needs.docs-check.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.quality-checks.result }}" == "failure" ]] || 
             [[ "${{ needs.test-matrix.result }}" == "failure" ]] || 
             [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "❌ **Overall Status: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "overall_status=failure" >> $GITHUB_ENV
          elif [[ "${{ needs.performance-benchmarks.result }}" == "failure" ]] || 
               [[ "${{ needs.docker-build.result }}" == "failure" ]] || 
               [[ "${{ needs.docs-check.result }}" == "failure" ]]; then
            echo "⚠️ **Overall Status: PARTIAL SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "overall_status=partial" >> $GITHUB_ENV
          else
            echo "✅ **Overall Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "overall_status=success" >> $GITHUB_ENV
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const summary = `## 🚀 CI Pipeline Results
            
            **Overall Status:** ${{ env.overall_status == 'success' && '✅ SUCCESS' || env.overall_status == 'partial' && '⚠️ PARTIAL SUCCESS' || '❌ FAILURE' }}
            
            | Component | Status | Details |
            |-----------|--------|---------|
            | 🛡️ Security | ${{ needs.security-audit.result || 'skipped' }} | Dependency vulnerabilities scan |
            | 🔍 Quality | ${{ needs.quality-checks.result || 'skipped' }} | Linting, formatting, type checking |
            | 🧪 Tests | ${{ needs.test-matrix.result || 'skipped' }} | Unit, integration, and E2E tests |
            | ⚡ Performance | ${{ needs.performance-benchmarks.result || 'skipped' }} | Benchmark comparisons |
            | 🐳 Docker | ${{ needs.docker-build.result || 'skipped' }} | Container build and test |
            | 📋 Dependencies | ${{ needs.dependency-review.result || 'skipped' }} | License and security review |
            | 📚 Documentation | ${{ needs.docs-check.result || 'skipped' }} | Completeness and link validation |
            
            ---
            
            **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Set final exit status
        run: |
          if [[ "${{ env.overall_status }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline completed"
          fi