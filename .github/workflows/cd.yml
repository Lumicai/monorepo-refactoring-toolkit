name: CD Pipeline

on:
  push:
    branches: [master]
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.wundr.io
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Substitute environment variables
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          
          # Wait for rollout
          kubectl rollout status deployment/wundr-staging -n wundr-staging --timeout=600s
          
          # Verify deployment
          kubectl get pods -n wundr-staging -l app=wundr,environment=staging
        env:
          ENVIRONMENT: staging
          IMAGE: ${{ needs.build-push.outputs.image-tag }}
          VERSION: ${{ github.sha }}
          REPLICAS: 2

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Basic health check
          curl -f https://staging.wundr.io/health || exit 1
          
          # API health check  
          curl -f https://staging.wundr.io/api/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: "Staging deployment ${{ job.status }}: ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-push, deploy-staging]
    if: |
      (github.ref == 'refs/heads/master' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://wundr.io
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig  
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME_PROD }} --region ${{ secrets.AWS_REGION }}

      - name: Blue-Green deployment
        run: |
          # Create new deployment version
          export DEPLOYMENT_COLOR=$(kubectl get deployment wundr-production -n wundr-production -o jsonpath='{.metadata.labels.color}' || echo "blue")
          export NEW_COLOR=$([ "$DEPLOYMENT_COLOR" = "blue" ] && echo "green" || echo "blue")
          
          echo "Current color: $DEPLOYMENT_COLOR, deploying to: $NEW_COLOR"
          
          # Deploy new version
          envsubst < k8s/deployment.yaml | sed "s/wundr-production/wundr-production-$NEW_COLOR/" | kubectl apply -f -
          
          # Wait for new deployment
          kubectl rollout status deployment/wundr-production-$NEW_COLOR -n wundr-production --timeout=600s
          
          # Test new deployment
          kubectl port-forward -n wundr-production svc/wundr-service-$NEW_COLOR 8080:80 &
          sleep 30
          curl -f http://localhost:8080/health || exit 1
          
          # Switch traffic
          kubectl patch service wundr-service -n wundr-production -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}'
          
          # Clean up old deployment (after verification period)
          sleep 300  # Wait 5 minutes
          kubectl delete deployment wundr-production-$DEPLOYMENT_COLOR -n wundr-production || true
          
        env:
          ENVIRONMENT: production
          IMAGE: ${{ needs.build-push.outputs.image-tag }}
          VERSION: ${{ github.ref_name }}
          REPLICAS: 5

      - name: Post-deployment verification
        run: |
          # Comprehensive health checks
          curl -f https://wundr.io/health || exit 1
          curl -f https://wundr.io/api/health || exit 1
          
          # Performance validation
          curl -f https://wundr.io/metrics || exit 1

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            ðŸš€ Production deployment ${{ job.status }}
            Version: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: https://wundr.io
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback mechanism
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production-rollback
    steps:
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Emergency rollback
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME_PROD }} --region ${{ secrets.AWS_REGION }}
          
          # Rollback to previous deployment
          kubectl rollout undo deployment/wundr-production -n wundr-production
          kubectl rollout status deployment/wundr-production -n wundr-production --timeout=300s

      - name: Verify rollback
        run: |
          curl -f https://wundr.io/health || exit 1

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸ”„ Emergency rollback completed for production",
              attachments: [{
                color: "warning",
                fields: [{
                  title: "Status",
                  value: "Rollback successful",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}