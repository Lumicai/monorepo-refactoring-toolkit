name: Monitoring & Alerting

on:
  push:
    branches: [master]
  schedule:
    # Run monitoring checks every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
          - all

env:
  MONITORING_TIMEOUT: 30s

jobs:
  # Health checks
  health-check:
    name: Health Check (${{ matrix.environment }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment:
          - staging
          - production
        include:
          - environment: staging
            url: https://staging.wundr.io
          - environment: production
            url: https://wundr.io
    steps:
      - name: Check application health
        run: |
          echo "🔍 Checking ${{ matrix.environment }} health..."
          
          # Basic health check
          if curl -f -s --max-time 30 "${{ matrix.url }}/health"; then
            echo "✅ Application health check passed"
          else
            echo "❌ Application health check failed"
            exit 1
          fi
          
          # API health check
          if curl -f -s --max-time 30 "${{ matrix.url }}/api/health"; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi

      - name: Check response time
        run: |
          echo "⏱️ Measuring response time..."
          
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${{ matrix.url }}/health")
          RESPONSE_TIME_MS=$(echo "$RESPONSE_TIME * 1000" | bc)
          
          echo "Response time: ${RESPONSE_TIME_MS}ms"
          
          # Alert if response time > 5 seconds
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${RESPONSE_TIME_MS}ms"
            exit 1
          fi

      - name: Check SSL certificate
        if: matrix.environment == 'production'
        run: |
          echo "🔒 Checking SSL certificate..."
          
          # Check certificate expiry
          CERT_EXPIRY=$(echo | openssl s_client -servername wundr.io -connect wundr.io:443 2>/dev/null | openssl x509 -noout -dates | grep 'notAfter' | cut -d= -f2)
          EXPIRY_DATE=$(date -d "$CERT_EXPIRY" +%s)
          CURRENT_DATE=$(date +%s)
          DAYS_TO_EXPIRY=$(( (EXPIRY_DATE - CURRENT_DATE) / 86400 ))
          
          echo "Certificate expires in $DAYS_TO_EXPIRY days"
          
          # Alert if certificate expires in less than 30 days
          if [ "$DAYS_TO_EXPIRY" -lt 30 ]; then
            echo "⚠️ SSL certificate expires soon: $DAYS_TO_EXPIRY days"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Health check failed for ${{ matrix.environment }}
            Environment: ${{ matrix.environment }}
            URL: ${{ matrix.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance monitoring
  performance-check:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse performance audit
        run: |
          # Create Lighthouse CI config
          cat > lighthouserc.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: ['https://wundr.io', 'https://wundr.io/dashboard'],
                numberOfRuns: 3,
              },
              assert: {
                assertions: {
                  'categories:performance': ['error', {minScore: 0.8}],
                  'categories:accessibility': ['error', {minScore: 0.9}],
                  'categories:best-practices': ['error', {minScore: 0.9}],
                  'categories:seo': ['error', {minScore: 0.8}],
                },
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF
          
          # Run Lighthouse CI
          lhci autorun

      - name: Performance benchmark
        run: |
          echo "📊 Running performance benchmarks..."
          
          # Load test with basic curl
          for i in {1..10}; do
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://wundr.io/health)
            echo "Request $i: ${RESPONSE_TIME}s"
          done

  # Infrastructure monitoring
  infrastructure-check:
    name: Infrastructure Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Check Kubernetes cluster health
        run: |
          echo "🔍 Checking Kubernetes cluster health..."
          
          # Check cluster nodes
          kubectl get nodes --no-headers | while read node status roles age version; do
            if [ "$status" != "Ready" ]; then
              echo "❌ Node $node is not ready: $status"
              exit 1
            else
              echo "✅ Node $node is ready"
            fi
          done
          
          # Check system pods
          kubectl get pods -n kube-system --field-selector=status.phase!=Running --no-headers
          if [ $? -eq 0 ]; then
            echo "❌ Some system pods are not running"
            kubectl get pods -n kube-system --field-selector=status.phase!=Running
            exit 1
          fi

      - name: Check application deployment status
        run: |
          echo "🔍 Checking application deployments..."
          
          # Check production deployment
          REPLICAS=$(kubectl get deployment wundr-production -n wundr-production -o jsonpath='{.status.readyReplicas}')
          DESIRED=$(kubectl get deployment wundr-production -n wundr-production -o jsonpath='{.spec.replicas}')
          
          if [ "$REPLICAS" != "$DESIRED" ]; then
            echo "❌ Production deployment not healthy: $REPLICAS/$DESIRED replicas ready"
            exit 1
          else
            echo "✅ Production deployment healthy: $REPLICAS/$DESIRED replicas ready"
          fi

      - name: Check resource usage
        run: |
          echo "📊 Checking resource usage..."
          
          # Check CPU and memory usage
          kubectl top nodes
          kubectl top pods -n wundr-production

  # Database monitoring
  database-check:
    name: Database Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Check database connectivity
        run: |
          echo "🔍 Checking database connectivity..."
          
          # Basic connection test (replace with actual database health endpoint)
          if curl -f -s --max-time 10 "https://wundr.io/api/health/database"; then
            echo "✅ Database connectivity check passed"
          else
            echo "❌ Database connectivity check failed"
            exit 1
          fi

      - name: Check database metrics
        run: |
          echo "📊 Checking database metrics..."
          
          # Query database metrics endpoint
          METRICS=$(curl -s "https://wundr.io/api/metrics/database")
          
          # Parse connection count (example)
          CONNECTION_COUNT=$(echo "$METRICS" | jq -r '.connections // 0')
          
          if [ "$CONNECTION_COUNT" -gt 100 ]; then
            echo "⚠️ High database connection count: $CONNECTION_COUNT"
          else
            echo "✅ Database connection count normal: $CONNECTION_COUNT"
          fi

  # Security monitoring
  security-check:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Check for suspicious activity
        run: |
          echo "🔍 Checking for suspicious activity..."
          
          # Check for unusual response codes from logs
          # This would typically connect to your logging service
          echo "✅ No suspicious activity detected"

      - name: Verify security headers
        run: |
          echo "🔒 Checking security headers..."
          
          HEADERS=$(curl -I -s https://wundr.io)
          
          # Check for security headers
          if echo "$HEADERS" | grep -q "Strict-Transport-Security"; then
            echo "✅ HSTS header present"
          else
            echo "❌ HSTS header missing"
            exit 1
          fi
          
          if echo "$HEADERS" | grep -q "X-Frame-Options"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "❌ X-Frame-Options header missing"
            exit 1
          fi

  # Alerts aggregation
  alert-manager:
    name: Alert Manager
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, infrastructure-check, database-check, security-check]
    if: always() && (github.event_name == 'schedule' || failure())
    steps:
      - name: Aggregate monitoring results
        run: |
          echo "📋 Aggregating monitoring results..."
          
          # Check job results
          HEALTH_STATUS="${{ needs.health-check.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-check.result }}"
          INFRASTRUCTURE_STATUS="${{ needs.infrastructure-check.result }}"
          DATABASE_STATUS="${{ needs.database-check.result }}"
          SECURITY_STATUS="${{ needs.security-check.result }}"
          
          echo "Health Check: $HEALTH_STATUS"
          echo "Performance Check: $PERFORMANCE_STATUS"
          echo "Infrastructure Check: $INFRASTRUCTURE_STATUS"
          echo "Database Check: $DATABASE_STATUS"
          echo "Security Check: $SECURITY_STATUS"
          
          # Determine overall status
          if [[ "$HEALTH_STATUS" == "failure" || 
                "$PERFORMANCE_STATUS" == "failure" || 
                "$INFRASTRUCTURE_STATUS" == "failure" || 
                "$DATABASE_STATUS" == "failure" || 
                "$SECURITY_STATUS" == "failure" ]]; then
            echo "OVERALL_STATUS=critical" >> $GITHUB_ENV
          else
            echo "OVERALL_STATUS=healthy" >> $GITHUB_ENV
          fi

      - name: Send critical alerts
        if: env.OVERALL_STATUS == 'critical'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 CRITICAL: System monitoring detected issues
            
            Status Summary:
            - Health Check: ${{ needs.health-check.result }}
            - Performance: ${{ needs.performance-check.result }}
            - Infrastructure: ${{ needs.infrastructure-check.result }}
            - Database: ${{ needs.database-check.result }}
            - Security: ${{ needs.security-check.result }}
            
            Immediate attention required!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_CRITICAL }}

      - name: Create incident issue
        if: env.OVERALL_STATUS == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 System Alert - ${new Date().toISOString()}`;
            const body = `
            ## System Monitoring Alert
            
            **Alert Time:** ${new Date().toISOString()}
            **Severity:** Critical
            
            ### Status Summary
            - Health Check: ${{ needs.health-check.result }}
            - Performance: ${{ needs.performance-check.result }}
            - Infrastructure: ${{ needs.infrastructure-check.result }}
            - Database: ${{ needs.database-check.result }}
            - Security: ${{ needs.security-check.result }}
            
            ### Next Steps
            - [ ] Investigate failing checks
            - [ ] Verify system stability
            - [ ] Implement fixes
            - [ ] Monitor recovery
            
            **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['incident', 'critical', 'monitoring']
            });

      - name: Send status update
        if: env.OVERALL_STATUS == 'healthy'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ System monitoring - All checks passed
            Timestamp: $(date)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}