version: '3.8'

services:
  # Main Wundr application
  wundr:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    image: wundr:${VERSION:-latest}
    container_name: wundr-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://wundr:wundr_password@postgres:5432/wundr
      - WUNDR_DATA_DIR=/app/data
      - WUNDR_LOG_DIR=/app/logs
    volumes:
      - wundr_data:/app/data
      - wundr_logs:/app/logs
      - ./projects:/app/projects:ro  # Mount projects for analysis
    depends_on:
      - redis
      - postgres
    networks:
      - wundr_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Web client (dashboard)
  wundr-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: webclient
    image: wundr-web:${VERSION:-latest}
    container_name: wundr-web
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://wundr:3000
      - PORT=3001
    depends_on:
      - wundr
    networks:
      - wundr_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: wundr-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-wundr_redis}
    volumes:
      - redis_data:/data
    networks:
      - wundr_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: wundr-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=wundr
      - POSTGRES_USER=wundr
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-wundr_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - wundr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wundr -d wundr"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wundr-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - wundr_network
    depends_on:
      - wundr

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wundr-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - wundr_network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: wundr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - wundr
      - wundr-web
      - grafana
    networks:
      - wundr_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  wundr_data:
    driver: local
  wundr_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  wundr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16